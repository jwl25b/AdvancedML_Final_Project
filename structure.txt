Train autoencoder
Procedure: Auto_Train()
Input: Batch data Bj
1. Initialize a new autoencoder model Aj
2. Train Aj with batch data Bj
3. Record the mean and variance of the reconstruction error w.r.t Bj as Aj.mean, Aj.var
================================================================
Relatedness of new data with new autoencoder and previously trained autoencoder: 
Procedure: Rel()
Input:  Data Batch Bj
	Trained new autoencoder: Aj
	Existing autoencoder: Ak
1.Average reconstruction error w.r.t Bj: Erj = Avg(L(Ak(Bj), Bj)), Erk = Ak.mean
2.Rel(Dj, Ak) = |(Erk âˆ’ Erj)/Erk|
================================================================
Assume data from a single batch are from the same task

Batchwise training:
Input: 	
	Batches: B1, B2, B3, ..., Bn

Initial:
	Autoencoder List - Auto_List = {}
	Expert List - Exp_List = {}

	#setup initial expert network
	A1 = Auto_train(B1)
	Initialize a new expert E1
	Feeding E1 with Batch B1

	Add A1 to Auto_List
	Add B1 to Exp_List

Start training:

	While (New Batch Bj coming):
		
		#find the most relevent expert network
		Minimum_Rel = inf
		Best_expert = None
		Best_autoencoder = None
		For Ak in Auto_List:		
			Rel = Rel(Bj, Ak)
			if Rel < Mnimum_Rel:
				Mnimum_Rel_Bj = Rel_Bj
				Best_expert = Ek
				Best_autoencoder = Ak

		#check whether almost all datapoints lies in mean + 3 variance of the best autoencoder
		outliers = 0
		reconstruction_errors = L(Ak(Bj), Bj)
		for error in reconstruction_errors:
			if |errors - (Ak.means + 3 Ak.var)|>0:
				#data point falls outside
				outliers+=1
		
		if outliers > outliersThreshold:
			Aj = Auto_Train(Bj)
			Initialize a new expert Ej #possible actions: finetuning, model distrillation, etc. 
			Feeding Ej with Batch Bj
		else:
			Feed Best_autoencoder with Batch Bj
			Feed Best_expert with Batch Bj

End training



	